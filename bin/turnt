#!/usr/bin/env node
'use strict';

const FS = require('fs');
const Path = require('path');
const URL = require('url');
const Errors = require('../lib/errors');

global.Config = require('nconf');

Config.argv({
  config: {
    alias: 'c',
    describe: 'Path to local turnstile configuration'
  },
  method: {
    alias: 'X',
    describe: 'HTTP request method',
    default: 'GET'
  },
  payload: {
    alias: 'd',
    describe: 'HTTP request payload',
    type: 'string'
  },
  digest: {
    describe: 'Digest signing scheme',
    default: 'SHA256'
  },
  header: {
    alias: 'H',
    array: true,
    describe: 'HTTP request headers'
  },
  output: {
    alias: 'o',
    describe: 'Write output to a file',
    default: false
  },

  identity: {
    alias: 'u',
    demand: true,
    describe: 'Identity key for the request'
  },
  secret: {
    alias: 'p',
    demand: true,
    describe: 'Secret key for the request'
  }
});

Config.defaults({
  log: {
    json: false,
    prettyPrint: true,
    level: 'debug'
  }
});

// Make logging look nicer
require('../lib/log');
Log.cli();

const TurnstileClient = require('../lib/client');

/**
 * Load request data from STDIN, a file, or from the argument value
 * @param  {String} payload The value of the `-d/--payload` flag. A `-` indicates
 *                          that data should be read from STDIN, while a leading `@`
 *                          indicates that the rest of the value is the path to a
 *                          file that should be read.
 * @return {Promise}
 */
const read = (payload) => {
  return new Promise((resolve, reject) => {
    if (typeof payload !== 'string' && !(payload instanceof Buffer)) {
      return resolve(false);
    }

    switch (payload[0]) {
    case '-': // Read from STDIN
      const data = [];

      process.stdin.on('data', (chunk) => data.push(chunk));
      process.stdin.on('end', () => resolve(Buffer.concat(data)));
      break;

    case '@': // Read from a file
      FS.readFile(Path.resolve(__dirname, payload.slice(1)), (err, data) => {
        if (err) {
          return reject(err);
        }

        resolve(data);
      });
      break;

    default: // Convert argument value to a buffer
      resolve(Buffer.from(payload, 'utf8'));
    }
  });
};


const conf = {
  digest: Config.get('digest'),
  secret: Config.get('secret')
};

const date = new Date();
const url = Config.get('_')[0];
const params = URL.parse(url);

params.method = Config.get('method');
params.identifier = 'turnt-request';
params.headers = {
  date: date.toUTCString(),
  host: params.host,
  'user-agent': `node-${process.version}/turnstile-tester`
};

// Round date to the nearest seconds for signing
params.date = new Date(date);
params.date.setMilliseconds(0);

params.identity = Config.get('identity');

// Send the request and handle output
read(Config.get('payload')).then((payload) => {
  conf.payload = payload;
  (new TurnstileClient(conf, params)).request().then((res) => {
    const output = Config.get('output');

    const body = res.body;

    if (!output) {
      Log.info(JSON.parse(body));

      return;
    }

    if (body.length > 0) {
      FS.writeFile(output, body, (err) => {
        if (err) {
          throw err;
        }

        Log.info(`Wrote ${res.body.length} bytes to ${output}`);
      });
    }
  }).catch((err) => {
    // If the error we're getting back is coming from rp and not node, we should log the actual error
    if (err instanceof Errors.rp.StatusCodeError) {
      Log.error(JSON.parse(err.error));
    } else {
      Log.error(err);
    }
  });
});
