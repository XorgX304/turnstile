#!/usr/bin/env node
'use strict';

const Errors = require('../lib/errors');
const SUPPORTED_ALGORITHMS = ['SHA256', 'SHA512'];

require('../lib/config');
const algorithm = Config.get('local:algorithm');

if (SUPPORTED_ALGORITHMS.indexOf(algorithm.toUpperCase()) === -1) {
  const message = `Turnstile currently supports the following encryption algorithms: ${SUPPORTED_ALGORITHMS.join(', ')}. You specified ${algorithm}.`;

  throw new Errors.UnsupportedAlgorithmError(message, algorithm.toUpperCase());
}

require('../lib/log');
const metrics = require('../lib/metrics');

const express = require('express');
const bodyParser = require('body-parser');
const app = express();

const server = require('http').createServer(app);

const local = require('../lib/provider/local');
const forward = require('../lib/control/forward');

// Remove the x-powered-by header
app.disable('x-powered-by');

// Incoming connection metrics
app.use((req, res, next) => {
  req._begin = Date.now();
  Metrics.increment('request.incoming');
  Metrics.gauge('request.active', 1);

  next();
});

// Set a default content-type header if one doesn't exist
app.use((req, res, next) => {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/octet-stream';
  }
  next();
});

app.use((req, res, next) => {
  if (!req.identity && req.headers.identity) {
    req.identity = req.headers.identity;
  }

  next();
});

app.use(bodyParser.raw({
  type: '*/*',
  limit: Config.get('listen:limit')
}));

app.use((req, res, next) => {
  /**
   * This is dumb but required because body-parser assigns an empty object to the body if
   * the request body is empty. Empty also includes empty strings. We use the _body flag to
   * determine if body-parser has done any work and if not, we set the body to an empty string
   * and flip the _body flag so body-parser doesn't do any more work.
   */
  if (!req._body) {
    req.body = Buffer.from('', 'utf8');
    req._body = true;
  }
  next();
});

// Only attach the correlation ID middleware if it's enabled
if (Config.get('correlation:enable')) {
  app.use(require('../lib/control/correlation').create(Config.get('correlation')));
}

// Add header check here. If the Authorization: Bearer <token> form exists, use the
// JWT middleware, otherwise use HMAC.
app.use((req, res, next) => {
  if (req.headers['authorization'] && req.headers['authorization'].startsWith('Bearer')) {
    // use the JWT middleware
    return local.jwt(Config.get('local'))(req, res, next);
  } else {
    return local.authn(Config.get('local'))(req, res, next);
  }
});

app.use(forward.create(Config.get('service')));

// Submit metrics for error responses
app.use(metrics.errResponseHandler);

// Error handler
app.use(Errors.handler);

// Submit metrics for successful responses
app.use(metrics.responseHandler);

// Write the response
app.use((req, res) => {
  res.send(res._body);
});

server.listen(
  Config.get('listen:port'),
  Config.get('listen:bind'),
  () => Log.info(`Listening on ${Config.get('listen:bind')}:${Config.get('listen:port')}`)
);
