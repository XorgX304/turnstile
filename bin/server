#!/usr/bin/env node
'use strict';

const Errors = require('../lib/errors');
const SUPPORTED_ALGORITHMS = ['SHA256', 'SHA512'];

require('../lib/config');
const algorithm = Config.get('local:algorithm');

if (SUPPORTED_ALGORITHMS.indexOf(algorithm.toUpperCase()) === -1) {
  const message = `Turnstile currently supports the following encryption algorithms: ${SUPPORTED_ALGORITHMS.join(', ')}. You specified ${algorithm}.`;

  throw new Errors.UnsupportedAlgorithmError(message, algorithm.toUpperCase());
}

require('../lib/log');
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

const server = require('http').createServer(app);

app.disable('x-powered-by');
app.use((req, res, next) => {
  if (!req.headers['content-type']) {
    req.headers['content-type'] = 'application/octet-stream';
  }
  next();
});

app.use(bodyParser.raw({
  type: '*/*',
  limit: Config.get('listen:limit')
}));

app.use((req, res, next) => {
  /**
   * This is dumb but required because body-parser assigns an empty object to the body if
   * the request body is empty. Empty also includes empty strings. We use the _body flag to
   * determine if body-parser has done any work and if not, we set the body to an empty string
   * and flip the _body flag so body-parser doesn't do any more work.
   */
  if (!req._body) {
    req.body = Buffer.from('', 'utf8');
    req._body = true;
  }
  next();
});

// Only attach the correlation ID middleware if it's enabled
if (Config.get('correlation:enable')) {
  app.use(require('../lib/control/correlation').create(Config.get('correlation')));
}

app.use(require('../lib/provider/local').authn(Config.get('local')));
app.use(require('../lib/control/forward').create(Config.get('service')));
// Error handler
app.use((err, req, res, next) => { // eslint-disable-line no-unused-vars
  return Errors.handler(err, req, res);
});

server.listen(
  Config.get('listen:port'),
  Config.get('listen:bind'),
  () => Log.info(`Listening on ${Config.get('listen:bind')}:${Config.get('listen:port')}`)
);
